[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\09581\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\09581\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.0 (Oracle Corporation Java 11.0.15)
[debug]       Load.loadUnit: plugins took 75.5582ms
[debug]       Load.loadUnit: defsScala took 0.2378ms
[debug] [Loading] Scanning directory C:\Users\09581\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\09581\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.5655 ms
[debug]           Load.resolveProject(global-plugins) took 38.7949ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\09581\.sbt\1.0\plugins, plugins: List(<none>))) took 75.5355ms
[debug] [Loading] Done in C:\Users\09581\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 92.0156ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1906ms
[debug]     Load.loadUnit(file:/C:/Users/09581/.sbt/1.0/plugins/, ...) took 175.8463ms
[debug]   Load.apply: load took 331.1458ms
[debug]   Load.apply: resolveProjects took 6.0533ms
[debug]   Load.apply: finalTransforms took 47.8195ms
[debug]   Load.apply: config.delegates took 5.7952ms
[debug]   Load.apply: Def.make(settings)... took 352.6074ms
[debug]   Load.apply: structureIndex took 77.6736ms
[debug]   Load.apply: mkStreams took 1.8321ms
[info] loading global plugins from C:\Users\09581\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3842.4372ms
[debug]           Load.loadUnit: plugins took 18.6813ms
[debug]           Load.loadUnit: defsScala took 0.0027ms
[debug] [Loading] Scanning directory C:\otus_spark_developer\Spark_developer_project_work_anomaly_detector\project
[debug]             Load.loadUnit: mkEval took 6.6137ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\otus_spark_developer\Spark_developer_project_work_anomaly_detector\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.9059 ms
[info] loading settings for project spark_developer_project_work_anomaly_detector-build from idea.sbt ...
[debug]               Load.resolveProject(spark_developer_project_work_anomaly_detector-build) took 2.7884ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark_developer_project_work_anomaly_detector-build, base: C:\otus_spark_developer\Spark_developer_project_work_anomaly_detector\project, plugins: List(<none>))) took 5.2684ms
[debug] [Loading] Done in C:\otus_spark_developer\Spark_developer_project_work_anomaly_detector\project, returning: (spark_developer_project_work_anomaly_detector-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2048.5967ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.4768ms
[debug]         Load.loadUnit(file:/C:/otus_spark_developer/Spark_developer_project_work_anomaly_detector/project/, ...) took 2072.5407ms
[debug]       Load.apply: load took 2073.8405ms
[debug]       Load.apply: resolveProjects took 0.0992ms
[debug]       Load.apply: finalTransforms took 7.6253ms
[debug]       Load.apply: config.delegates took 0.6535ms
[debug]       Load.apply: Def.make(settings)... took 72.1645ms
[debug]       Load.apply: structureIndex took 20.101ms
[debug]       Load.apply: mkStreams took 0.0036ms
[info] loading project definition from C:\otus_spark_developer\Spark_developer_project_work_anomaly_detector\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3165.1169ms
[debug]     Load.loadUnit: defsScala took 0.0018ms
[debug] [Loading] Scanning directory C:\otus_spark_developer\Spark_developer_project_work_anomaly_detector
[debug]       Load.loadUnit: mkEval took 0.2054ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.5028 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 29.6485ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\otus_spark_developer\Spark_developer_project_work_anomaly_detector, plugins: List(<none>))) took 33.9339ms
[debug] [Loading] Done in C:\otus_spark_developer\Spark_developer_project_work_anomaly_detector, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1275.4403ms
[debug]     Load.loadUnit: cleanEvalClasses took 8.2797ms
[debug]   Load.loadUnit(file:/C:/otus_spark_developer/Spark_developer_project_work_anomaly_detector/, ...) took 4449.3891ms
[debug] Load.apply: load took 4450.8157ms
[debug] Load.apply: resolveProjects took 0.0876ms
[debug] Load.apply: finalTransforms took 16.9105ms
[debug] Load.apply: config.delegates took 0.2708ms
[debug] Load.apply: Def.make(settings)... took 59.88ms
[debug] Load.apply: structureIndex took 16.2493ms
[debug] Load.apply: mkStreams took 0.0025ms
[info] set current project to Spark_developer_project_work_anomaly_detector (in build file:/C:/otus_spark_developer/Spark_developer_project_work_anomaly_detector/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63003 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63003, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Spark_developer_project_work_anomaly_detector (in build file:/C:/otus_spark_developer/Spark_developer_project_work_anomaly_detector/)
[debug] > Exec(idea-shell, None, None)
